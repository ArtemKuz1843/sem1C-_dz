//Комментарии пишутся после (//). Закомментить выделенные строки Ctrl+K+C или Сtrl+/ (кн.?/).
//Для настройки автоматического сохранения в Vscode, File-Preferens-Settings поиск раздел Commony Used параметр Files: Auto Save изменить на noFocuschange
//рекомендован терминал "Bash". Чтобы не путаться в терминалах их можно переименовывать.
//Для загрузки в удалённый репозиторий программы C# необходимо всего 2 файла, .cs и .csproj, остальные отсеиваются файлом .gitignore (с набором внутри) в корневой дирректории.
//dotnet new gitignore - кмманда для создания .gitignore в C#. Дирректории нумеруем и называем по порядку задач, и заливаем в GitHub так же.
//Всплывающие подсказки - результат таботы расширения С#, установленного в приложениях в VScode.
//Форматировать код - ПКМ "Форматировать документ"

//Console — команда, позволяющая работать с термин. Соответственно, будут какие-то данные вносить/выводить, путём ввода напрямую в терминале.
//WriteLine. Сonsole.WriteLine(""); - ком, оператор, выв текст в термин и ставит курсор на новую строку, текст, пишется в круглых скобках и двойных кавычках ("").
//Write. Сonsole.Write(""); - почти то же самое, но в одной строке, может появиться артефакт в виде символа "%".
//ReаdLine. string username = Console.ReadLine(); - считывание данных, но эти дан нужно где-то сохр, созд некий контейнер(коробку), куда можн полож знач, введ польз, нужна 
//переменная!, а для перемен необход указ тип(!тип данных), из-за выд объём занимаемой памяти, имена перем всегд с !маленькой буквы.
//Console.Clear(); - отчистка консоли

//string username = Console.ReadLine(); string - если данные, которые вводим, строки.
//int num = int.Parse(Console.ReadLine()); int - тип данных, тип переменной для целых чисел (целое число).
//double - контейнер для работы с вещественными числами, дробные числа с остатком.
//bool - тип данных Истина или Ложь.

//username.ToLower() - оператор применяется к переменной, все символы в строке переводит в нижний регистр. !!! Учесть референсное значение не "Маша", а "маша".
//% - логическая опреация как умножение или деление, фиксирует остаток от деления.
//new Random().Next(min, max) - "хочу случайное число в диапазоне от Мин до Макс-1", генератор случ чис от Мин до Макс-1. !Само знач Макуимума не входит.
//&&. if (num1 < 1000 && num1 >99) -логическое И. Две вертикальные черты || - логическое или.

// if( УСЛОВИЕ ) 
// {
// Набор действий 1
// }
// else
// {
// Набор действий 2
// }

// while(ЦИКЛ. УСЛОВИЕ ПРОДОЛЖЕНИЯ)
// {
// Набор действий
// }
// int count = 0;
// while( count < 100)
// {
// Набор действий
// count = count + 1
// }

//Console.SetCursorPosition(10, 4); - для рисования, отступ от Левого и Верхнего края терминала.
//Дальше даём наименование нашему контейнеру (имя переменной или идентификатора).Назовём username.
//формируем приглашение пользователя ко вводу.
// Console.SetCursorPosition(10, 4); //Для рисования, отступ от Левого и Верхнего края терминала
// Console.WriteLine("+"); //морской бой, ставим "+"на 10.4
//count = count + 1, count =+1, count++

//int - обяв тип перемен; num - назвали; Console.ReаdLine() - комманда для получ ввода от польз строки!; int.Parse() - преобр строку в числ int, подобно Convert.ToInt32()
//int num = int.Parse(Console.ReadLine());
//int num = Convert.ToInt32(Console.ReadLine());
//Console.Write($"Квадрат {num} равен {square}");
//Console.Write("Квадрат "+num+" равен "+square); //КОНКОТИНАЦИЯ строк

// Напишите программу, которая принимает на вход
// трёхзначное число и на выходе показывает последнюю цифру
// этого числа.
// 456 -> 6
// 782 -> 2
// 918 -> 8